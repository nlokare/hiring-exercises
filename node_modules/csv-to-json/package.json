{
  "name": "csv-to-json",
  "version": "0.0.3",
  "description": "parses csv and returns it into json object",
  "main": "csv.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/alfredkam/bigData/tree/master/csv-to-json"
  },
  "keywords": [
    "csv",
    "csv to json",
    "json",
    "json object"
  ],
  "author": {
    "name": "alfred kam"
  },
  "license": "BSD",
  "readmeFilename": "README.md",
  "readme": "csv-to-json\n=======\n\nConverts your csv into json structure\n\nDependencies\n====\nfs\n\nUsage\n=====\nParse a csv file like this:\n```javascript\nvar csv = require(\"./csv.js\");\nvar json = csv.parse('path/to/file'); // Console reads “Parsed Items: #”\n```\n\nWrites the parsed file to a file like this:\n```javascript\ncsv.write('path/to/file'); // Console reads “Parsed Items: #”\n```\n\n---\n\nBy default, a report is sent to the console (“Parsed Items: #” for `.parse()`; “File saved” for `.write()`). You can pass an config object as a second argument with `console: false` to bypass this behavior. Like so:\n```javascript\nvar config = {\n    console: false\n}\nvar json = csv.parse('path/to/file', config);\ncsv.write('path/to/file', config);\n```\n",
  "_id": "csv-to-json@0.0.3",
  "_from": "csv-to-json@"
}
